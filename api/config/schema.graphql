type Card {
  color: String
  rank: String!
}

type Game {
  bigBlind: Int!
  boardCards: [Card!]!
  currentPlayer: Player
  currentStage: String
  id: ID!
  isFinished: Boolean!
  justStarted: Boolean!
  players: [Player!]
  pot: Int!
  smallBlind: Int!
  version: ID!
}

"""
Autogenerated input type of MakeMove
"""
input MakeMoveInput {
  bet: Int

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  gameVersion: ID!
  move: String!
  xPlayerId: ID
}

"""
Autogenerated return type of MakeMove
"""
type MakeMovePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  success: Boolean!
}

type Mutation {
  makeMove(input: MakeMoveInput!): MakeMovePayload
  signinUser(input: SigninUserMutationInput!): SigninUserMutationPayload
}

type Player {
  active: Boolean!
  avatarUrl: String
  balance: Int
  cards: [Card!]
  id: ID!
  isInTurn: Boolean!
  moneyInPot: Int
  name: String!
  position: String
  seatNumber: Int
}

type Query {
  currentUser: User!
  isAuthenticated: Boolean!
  rooms: [Room!]!
}

type Room {
  currentGame: Game!
  id: ID!
  moveTimeLimit: Int!
  name: ID!
  users: [User!]!
}

"""
Autogenerated input type of SigninUserMutation
"""
input SigninUserMutationInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  password: String!
  username: String!
}

"""
Autogenerated return type of SigninUserMutation
"""
type SigninUserMutationPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  token: String
}

type Subscription {
  getRoom(roomId: ID!): Room!
}

type User {
  id: ID!
  name: String!
}